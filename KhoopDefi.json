{
  "language": "Solidity",
  "sources": {
    "src/KhoopDefi.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title KhoopDefi - Sequential Round-Robin Distribution\n * @notice Referral & team earn: 1x at purchase + cycles 1,2,3 (NOT cycle 4)\n * @dev Total 4 payments per slot: purchase + first 3 cycles only\n */\ncontract KhoopDefi is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // ============ Errors ============\n    error KhoopDefi__ExceedsTransactionLimit();\n    error KhoopDefi__InsufficientBalance();\n    error KhoopDefi__SelfReferral();\n    error KhoopDefi__UnregisteredReferrer();\n    error KhoopDefi__ZeroAddress();\n    error KhoopDefi__InCooldown();\n    error KhoopDefi__MustPayExactAmount();\n    error KhoopDefi__CooldownNotActive();\n    error KhoopDefi__UserNotRegistered();\n    error KhoopDefi__UserAlreadyRegistered();\n    error KhoopDefi__NoActiveCycles();\n    error KhoopDefi__InvalidAmount();\n    error KhoopDefi__CannotRegisterForAnotherUser();\n\n    // ============ Types ============\n    struct User {\n        address referrer;\n        uint256 totalEntriesPurchased;\n        uint256 totalCyclesCompleted;\n        uint256 referrerBonusEarned;\n        uint256 referrerBonusMissed;\n        uint256 totalEarnings;\n        uint256 totalReferrals;\n        uint256 cooldownEnd;\n        bool isRegistered;\n        bool isActive;\n    }\n\n    struct Entry {\n        uint256 entryId;\n        address owner;\n        uint256 purchaseTimestamp;\n        uint8 cyclesCompleted;\n        uint256 lastCycleTimestamp;\n        bool isActive;\n    }\n\n    struct GlobalStats {\n        uint256 totalUsers;\n        uint256 totalActiveUsers;\n        uint256 totalEntriesPurchased;\n        uint256 totalReferrerBonusPaid;\n        uint256 totalReferrerBonusMissed;\n        uint256 totalPayoutsMade;\n        uint256 totalCyclesCompleted;\n        uint256 totalSlotsRemaining;\n    }\n\n    // ============ Constants ============\n    uint256 private constant GAS_BUFFER = 120_000;\n    uint256 private constant MAX_GAS_PER_ITERATION = 700_000;\n    uint256 private constant MAX_ITERATIONS_PER_CALL = 50;\n    uint256 private constant CORE_TEAM_SHARE = 15e16;\n    uint256 private constant INVESTORS_SHARE = 2e16;\n    uint256 private constant CONTINGENCY_SHARE = 1e17;\n    uint256 private constant ENTRY_COST = 15e18;\n    uint256 private constant CYCLE_PAYOUT = 5e18;\n    uint256 private constant MAX_CYCLES_PER_ENTRY = 4;\n    uint256 private constant LAST_CYCLE = 4;\n    uint256 private constant MAX_ENTRIES_PER_TX = 20;\n    uint256 private constant REFERRER_ENTRY_BONUS = 1e18;\n    uint256 private constant COOLDOWN_PERIOD = 30 minutes;\n    uint256 private constant REDUCED_COOLDOWN = 15 minutes;\n    uint256 private constant COOLDOWN_FEE = 5e17;\n    uint256 private constant TOTAL_TEAM_SHARE = (CORE_TEAM_SHARE * 4) + (INVESTORS_SHARE * 15) + CONTINGENCY_SHARE;\n\n    // ============ Immutable State Variables ============\n    IERC20 public immutable usdt;\n    address[4] public coreTeamWallet;\n    address[15] public investorsWallet;\n    address public immutable reserveWallet;\n    address public immutable powerCycleWallet;\n\n    // ============ Mappings ============\n    mapping(address => User) public users;\n    mapping(uint256 => Entry) public entries;\n    mapping(address => uint256[]) public userEntries;\n    mapping(address => address[]) public userReferrals;\n\n    // Queue management\n    uint256[] public entryQueue;\n    uint256 public nextEntryIndex;\n\n    // ============ Global Tracking ============\n    GlobalStats public globalStats;\n    uint256 public nextEntryId = 1;\n    uint256 private teamAccumulatedBalance;\n    uint256 private accumulatedCoolDownFee;\n\n    // ============ Events ============\n    event EntryPurchased(uint256 indexed entryId, address indexed user, address indexed referrer, uint256 amount);\n    event CycleCompleted(uint256 indexed entryId, address indexed user, uint8 cycleNumber, uint256 payoutAmount);\n    event EntryMaxedOut(uint256 indexed entryId, address indexed user);\n    event ReferralAdded(address indexed referrer, address indexed referred);\n    event ReferrerBonusPaid(address indexed referrer, address indexed referred, uint256 amount);\n    event UserRegistered(address indexed user, address indexed referrer);\n    event BatchEntryPurchased(uint256 startId, uint256 endId, address indexed user, uint256 totalCost);\n    event CooldownReduced(address indexed user, uint256 feePaid);\n    event TeamSharesDistributed(uint256 totalAmount);\n    event CyclesProcessed(uint256 count, uint256 totalPaid);\n    event SystemDonation(address indexed donor, uint256 amount);\n    event EmergencyWithdraw(address indexed donor, uint256 amount);\n    event ReferralBonusSkipped(uint256 indexed entryId, address indexed referrer);\n\n    // ============ Constructor ============\n    constructor(\n        address[4] memory _coreTeam,\n        address[15] memory _investors,\n        address _reserve,\n        address _powerCycle,\n        address _usdt\n    ) Ownable(msg.sender) {\n        if (_reserve == address(0) || _powerCycle == address(0) || _usdt == address(0)) {\n            revert KhoopDefi__ZeroAddress();\n        }\n\n        for (uint256 i = 0; i < 4; i++) {\n            if (_coreTeam[i] == address(0)) revert KhoopDefi__ZeroAddress();\n            coreTeamWallet[i] = _coreTeam[i];\n        }\n\n        for (uint256 i = 0; i < 15; i++) {\n            if (_investors[i] == address(0)) revert KhoopDefi__ZeroAddress();\n            investorsWallet[i] = _investors[i];\n        }\n\n        reserveWallet = _reserve;\n        powerCycleWallet = _powerCycle;\n        usdt = IERC20(_usdt);\n\n        users[powerCycleWallet] = User({\n            referrer: address(0),\n            totalEntriesPurchased: 0,\n            totalCyclesCompleted: 0,\n            referrerBonusEarned: 0,\n            referrerBonusMissed: 0,\n            totalEarnings: 0,\n            totalReferrals: 0,\n            cooldownEnd: 0,\n            isRegistered: true,\n            isActive: true\n        });\n        globalStats.totalUsers++;\n        globalStats.totalActiveUsers++;\n        emit UserRegistered(powerCycleWallet, address(0));\n    }\n\n    // ============ External Functions ============\n\n    function registerUser(address user, address referrer) external {\n        if (user != msg.sender) revert KhoopDefi__CannotRegisterForAnotherUser();\n        if (user == referrer) revert KhoopDefi__SelfReferral();\n        if (users[user].isRegistered) revert KhoopDefi__UserAlreadyRegistered();\n        if (referrer != address(0) && !users[referrer].isRegistered) {\n            revert KhoopDefi__UnregisteredReferrer();\n        }\n\n        users[user] = User({\n            referrer: referrer,\n            totalEntriesPurchased: 0,\n            totalCyclesCompleted: 0,\n            referrerBonusEarned: 0,\n            referrerBonusMissed: 0,\n            totalEarnings: 0,\n            totalReferrals: 0,\n            cooldownEnd: 0,\n            isRegistered: true,\n            isActive: false\n        });\n\n        if (referrer != address(0)) {\n            userReferrals[referrer].push(user);\n            users[referrer].totalReferrals++;\n            emit ReferralAdded(referrer, user);\n        }\n\n        globalStats.totalUsers++;\n        emit UserRegistered(user, referrer);\n    }\n\n    function purchaseEntries(uint256 numEntries) external nonReentrant {\n        if (!users[msg.sender].isRegistered) revert KhoopDefi__UserNotRegistered();\n        if (numEntries == 0 || numEntries > MAX_ENTRIES_PER_TX) {\n            revert KhoopDefi__ExceedsTransactionLimit();\n        }\n        if (users[msg.sender].cooldownEnd != 0 && block.timestamp < users[msg.sender].cooldownEnd) {\n            revert KhoopDefi__InCooldown();\n        }\n\n        uint256 totalCost = ENTRY_COST * numEntries;\n        if (usdt.balanceOf(msg.sender) < totalCost) revert KhoopDefi__MustPayExactAmount();\n\n        uint256 startId = nextEntryId;\n\n        usdt.safeTransferFrom(msg.sender, address(this), totalCost);\n\n        address userReferrer = users[msg.sender].referrer;\n        bool isReferrerActive = (userReferrer != address(0)) && users[userReferrer].isActive;\n\n        for (uint256 i = 0; i < numEntries; i++) {\n            _createEntry(msg.sender);\n\n            // Check for missed initial referral bonus\n            if (userReferrer != address(0) && !isReferrerActive) {\n                users[userReferrer].referrerBonusMissed += REFERRER_ENTRY_BONUS;\n                globalStats.totalReferrerBonusMissed += REFERRER_ENTRY_BONUS;\n                emit ReferralBonusSkipped(nextEntryId - 1, userReferrer);\n            }\n        }\n\n        if (!users[msg.sender].isActive) {\n            _updateUserActiveStatus(msg.sender);\n        }\n        users[msg.sender].totalEntriesPurchased += numEntries;\n        users[msg.sender].cooldownEnd = block.timestamp + COOLDOWN_PERIOD;\n        globalStats.totalEntriesPurchased += numEntries;\n\n        _processAvailableCycles();\n\n        emit BatchEntryPurchased(startId, nextEntryId - 1, msg.sender, totalCost);\n    }\n\n    function reduceCooldown() external nonReentrant {\n        User storage user = users[msg.sender];\n\n        if (user.cooldownEnd == 0) revert KhoopDefi__CooldownNotActive();\n        if (block.timestamp >= user.cooldownEnd) revert KhoopDefi__CooldownNotActive();\n        if (usdt.balanceOf(msg.sender) < COOLDOWN_FEE) revert KhoopDefi__InsufficientBalance();\n\n        usdt.safeTransferFrom(msg.sender, address(this), COOLDOWN_FEE);\n        accumulatedCoolDownFee += COOLDOWN_FEE;\n        uint256 newCooldownEnd = block.timestamp + REDUCED_COOLDOWN;\n        user.cooldownEnd = newCooldownEnd >= user.cooldownEnd ? block.timestamp : newCooldownEnd;\n\n        emit CooldownReduced(msg.sender, COOLDOWN_FEE);\n    }\n\n    function completeCycles() external nonReentrant {\n        uint256 processed = _processAvailableCycles();\n        if (processed == 0) revert KhoopDefi__NoActiveCycles();\n    }\n\n    function donateToSystem(uint256 amount) external nonReentrant {\n        if (amount == 0) revert KhoopDefi__InvalidAmount();\n        if (usdt.balanceOf(msg.sender) < amount) revert KhoopDefi__InsufficientBalance();\n\n        usdt.safeTransferFrom(msg.sender, address(this), amount);\n        emit SystemDonation(msg.sender, amount);\n        _processAvailableCycles();\n    }\n\n    function processCyclesBatch(uint256 iterations) external nonReentrant returns (uint256) {\n        uint256 processed = _processCyclesManual(iterations);\n\n        if (processed > 0) {\n            emit CyclesProcessed(processed, processed * CYCLE_PAYOUT);\n        }\n\n        return processed;\n    }\n\n    function emergencyWithdraw(uint256 amount) external nonReentrant onlyOwner {\n        if (amount == 0) revert KhoopDefi__InvalidAmount();\n        if (usdt.balanceOf(address(this)) < amount) revert KhoopDefi__InsufficientBalance();\n\n        usdt.safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    // ============ Internal Functions ============\n\n    function _createEntry(address user) internal {\n        uint256 entryId = nextEntryId;\n\n        entries[entryId] = Entry({\n            entryId: entryId,\n            owner: user,\n            purchaseTimestamp: block.timestamp,\n            cyclesCompleted: 0,\n            lastCycleTimestamp: block.timestamp,\n            isActive: true\n        });\n\n        userEntries[user].push(entryId);\n        entryQueue.push(entryId);\n\n        globalStats.totalSlotsRemaining += MAX_CYCLES_PER_ENTRY;\n\n        address userReferrer = users[user].referrer;\n        if (userReferrer != address(0) && users[userReferrer].isActive) {\n            _payReferralBonus(userReferrer, REFERRER_ENTRY_BONUS, user);\n        }\n        _distributeTeamShares();\n\n        emit EntryPurchased(entryId, user, userReferrer, ENTRY_COST);\n        nextEntryId++;\n    }\n\n    function _payReferralBonus(address referrer, uint256 amount, address referred) internal {\n        users[referrer].referrerBonusEarned += amount;\n        globalStats.totalReferrerBonusPaid += amount;\n        usdt.safeTransfer(referrer, amount);\n        emit ReferrerBonusPaid(referrer, referred, amount);\n    }\n\n    function _distributeTeamShares() internal {\n        uint256 totalCorePerWallet = CORE_TEAM_SHARE;\n        uint256 totalInvestorPerWallet = INVESTORS_SHARE;\n        uint256 totalContingency = CONTINGENCY_SHARE;\n\n        for (uint256 i = 0; i < 4; i++) {\n            usdt.safeTransfer(coreTeamWallet[i], totalCorePerWallet);\n        }\n\n        for (uint256 i = 0; i < 15; i++) {\n            usdt.safeTransfer(investorsWallet[i], totalInvestorPerWallet);\n        }\n\n        usdt.safeTransfer(reserveWallet, totalContingency);\n\n        uint256 totalDistributed = (totalCorePerWallet * 4) + (totalInvestorPerWallet * 15) + totalContingency;\n        teamAccumulatedBalance += totalDistributed;\n        emit TeamSharesDistributed(totalDistributed);\n    }\n\n    function _processAvailableCycles() internal returns (uint256 totalCyclesProcessed) {\n        if (entryQueue.length == 0) return 0;\n\n        uint256 balance = usdt.balanceOf(address(this));\n        uint256 minGas = 50_000;\n        uint256 totalEntries = entryQueue.length;\n        uint256 startGas = gasleft();\n\n        uint256 maxIterations = (startGas - GAS_BUFFER) / MAX_GAS_PER_ITERATION;\n        if (maxIterations > MAX_ITERATIONS_PER_CALL) {\n            maxIterations = MAX_ITERATIONS_PER_CALL;\n        }\n\n        uint256 iterations = 0;\n\n        while (iterations < maxIterations && gasleft() > GAS_BUFFER) {\n            uint256 entryId = entryQueue[nextEntryIndex];\n            Entry storage entry = entries[entryId];\n\n            if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n                bool isLastCycle = (entry.cyclesCompleted + 1 == LAST_CYCLE);\n\n                address userReferrer = users[entry.owner].referrer;\n                bool shouldPayReferrer = !isLastCycle && userReferrer != address(0) && users[userReferrer].isActive;\n\n                bool shouldPayTeam = !isLastCycle;\n\n                uint256 requiredBalance = CYCLE_PAYOUT;\n                if (shouldPayReferrer) requiredBalance += REFERRER_ENTRY_BONUS;\n                if (shouldPayTeam) requiredBalance += TOTAL_TEAM_SHARE;\n\n                if (balance < requiredBalance) {\n                    break;\n                }\n\n                if (shouldPayTeam) {\n                    _distributeTeamShares();\n                }\n                if (shouldPayReferrer) {\n                    _payReferralBonus(userReferrer, REFERRER_ENTRY_BONUS, entry.owner);\n                } else if (!isLastCycle && userReferrer != address(0) && !users[userReferrer].isActive) {\n                    users[userReferrer].referrerBonusMissed += REFERRER_ENTRY_BONUS;\n                    globalStats.totalReferrerBonusMissed += REFERRER_ENTRY_BONUS;\n                    emit ReferralBonusSkipped(entryId, userReferrer);\n                }\n\n                // Update entry and user stats\n                entry.cyclesCompleted++;\n                entry.lastCycleTimestamp = block.timestamp;\n                users[entry.owner].totalCyclesCompleted++;\n                users[entry.owner].totalEarnings += CYCLE_PAYOUT;\n                globalStats.totalCyclesCompleted++;\n                globalStats.totalPayoutsMade += CYCLE_PAYOUT;\n                globalStats.totalSlotsRemaining--;\n\n                // Pay cycle payout to entry owner\n                usdt.safeTransfer(entry.owner, CYCLE_PAYOUT);\n                balance -= requiredBalance;\n                totalCyclesProcessed++;\n\n                emit CycleCompleted(entryId, entry.owner, entry.cyclesCompleted, CYCLE_PAYOUT);\n\n                // Check if entry completed all cycles\n                if (entry.cyclesCompleted >= MAX_CYCLES_PER_ENTRY) {\n                    entry.isActive = false;\n                    _updateUserActiveStatus(entry.owner);\n                    emit EntryMaxedOut(entryId, entry.owner);\n                }\n            }\n\n            // Move to next entry in queue (circular)\n            nextEntryIndex = (nextEntryIndex + 1) % totalEntries;\n            iterations++;\n        }\n\n        if (totalCyclesProcessed > 0) {\n            emit CyclesProcessed(totalCyclesProcessed, totalCyclesProcessed * CYCLE_PAYOUT);\n        }\n\n        return totalCyclesProcessed;\n    }\n\n    function _processCyclesManual(uint256 maxIterations) internal returns (uint256 totalCyclesProcessed) {\n        if (entryQueue.length == 0) return 0;\n\n        uint256 balance = usdt.balanceOf(address(this));\n        uint256 minGas = 50_000;\n        uint256 totalEntries = entryQueue.length;\n        uint256 iterations = 0;\n\n        while (iterations < maxIterations && gasleft() > minGas) {\n            uint256 entryId = entryQueue[nextEntryIndex];\n            Entry storage entry = entries[entryId];\n\n            if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n                bool isLastCycle = (entry.cyclesCompleted + 1 == LAST_CYCLE);\n\n                address userReferrer = users[entry.owner].referrer;\n                bool shouldPayReferrer = !isLastCycle && userReferrer != address(0) && users[userReferrer].isActive;\n\n                bool shouldPayTeam = !isLastCycle;\n\n                uint256 requiredBalance = CYCLE_PAYOUT;\n                if (shouldPayReferrer) requiredBalance += REFERRER_ENTRY_BONUS;\n                if (shouldPayTeam) requiredBalance += TOTAL_TEAM_SHARE;\n\n                if (balance < requiredBalance) {\n                    break;\n                }\n\n                if (shouldPayTeam) {\n                    _distributeTeamShares();\n                }\n                if (shouldPayReferrer) {\n                    _payReferralBonus(userReferrer, REFERRER_ENTRY_BONUS, entry.owner);\n                } else if (!isLastCycle && userReferrer != address(0) && !users[userReferrer].isActive) {\n                    users[userReferrer].referrerBonusMissed += REFERRER_ENTRY_BONUS;\n                    globalStats.totalReferrerBonusMissed += REFERRER_ENTRY_BONUS;\n                    emit ReferralBonusSkipped(entryId, userReferrer);\n                }\n\n                entry.cyclesCompleted++;\n                entry.lastCycleTimestamp = block.timestamp;\n                users[entry.owner].totalCyclesCompleted++;\n                users[entry.owner].totalEarnings += CYCLE_PAYOUT;\n                globalStats.totalCyclesCompleted++;\n                globalStats.totalPayoutsMade += CYCLE_PAYOUT;\n                globalStats.totalSlotsRemaining--;\n\n                usdt.safeTransfer(entry.owner, CYCLE_PAYOUT);\n                balance -= requiredBalance;\n                totalCyclesProcessed++;\n\n                emit CycleCompleted(entryId, entry.owner, entry.cyclesCompleted, CYCLE_PAYOUT);\n\n                if (entry.cyclesCompleted >= MAX_CYCLES_PER_ENTRY) {\n                    entry.isActive = false;\n                    _updateUserActiveStatus(entry.owner);\n                    emit EntryMaxedOut(entryId, entry.owner);\n                }\n            }\n\n            nextEntryIndex = (nextEntryIndex + 1) % totalEntries;\n            iterations++;\n        }\n\n        return totalCyclesProcessed;\n    }\n\n    function _hasPendingCycles(address user) internal view returns (bool) {\n        uint256[] storage userSlots = userEntries[user];\n\n        for (uint256 i = 0; i < userSlots.length; i++) {\n            Entry storage entry = entries[userSlots[i]];\n            if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function _updateUserActiveStatus(address user) internal {\n        bool hasActiveEntries = false;\n        uint256[] storage userEntryIds = userEntries[user];\n\n        for (uint256 i = 0; i < userEntryIds.length; i++) {\n            Entry storage entry = entries[userEntryIds[i]];\n            if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n                hasActiveEntries = true;\n                break;\n            }\n        }\n\n        if (users[user].isActive != hasActiveEntries) {\n            users[user].isActive = hasActiveEntries;\n            if (hasActiveEntries) {\n                globalStats.totalActiveUsers++;\n            } else {\n                globalStats.totalActiveUsers--;\n            }\n        }\n    }\n\n    // ============ View Functions ============\n\n    function getUserAllEntries(address user) external view returns (uint256[] memory) {\n        return userEntries[user];\n    }\n\n    function isUserActive(address user) external view returns (bool) {\n        return users[user].isActive;\n    }\n\n    function getContractBalance() external view returns (uint256) {\n        return usdt.balanceOf(address(this));\n    }\n\n    function getTeamAccumulatedBalance() external view returns (uint256) {\n        return teamAccumulatedBalance;\n    }\n\n    function getCooldownRemaining(address user) external view returns (uint256) {\n        if (users[user].cooldownEnd == 0 || block.timestamp >= users[user].cooldownEnd) {\n            return 0;\n        }\n        return users[user].cooldownEnd - block.timestamp;\n    }\n\n    function getAccumulatedCoolDownFee() external view returns (uint256) {\n        return accumulatedCoolDownFee;\n    }\n\n    function userHasPendingCycles(address user) external view returns (bool) {\n        return _hasPendingCycles(user);\n    }\n\n    function getQueueLength() external view returns (uint256) {\n        return entryQueue.length;\n    }\n\n    function getNextInLine()\n        external\n        view\n        returns (uint256 entryId, address owner, uint8 cyclesCompleted, uint8 cyclesRemaining, bool isActive)\n    {\n        uint256 totalEntries = entryQueue.length;\n        if (totalEntries == 0) return (0, address(0), 0, 0, false);\n\n        uint256 currentId = entryQueue[nextEntryIndex];\n        Entry storage entry = entries[currentId];\n\n        if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n            return (\n                currentId, entry.owner, entry.cyclesCompleted, uint8(MAX_CYCLES_PER_ENTRY - entry.cyclesCompleted), true\n            );\n        }\n\n        uint256 nextValidIndex = (nextEntryIndex + 1) % totalEntries;\n        for (uint256 i = 0; i < totalEntries; i++) {\n            currentId = entryQueue[nextValidIndex];\n            entry = entries[currentId];\n\n            if (entry.isActive && entry.cyclesCompleted < MAX_CYCLES_PER_ENTRY) {\n                return (\n                    currentId,\n                    entry.owner,\n                    entry.cyclesCompleted,\n                    uint8(MAX_CYCLES_PER_ENTRY - entry.cyclesCompleted),\n                    true\n                );\n            }\n\n            nextValidIndex = (nextValidIndex + 1) % totalEntries;\n        }\n\n        return (0, address(0), 0, 0, false);\n    }\n\n    function getPendingCyclesCount() external view returns (uint256 totalPendingCycles) {\n        return globalStats.totalSlotsRemaining;\n    }\n\n    function getEntryDetails(uint256 entryId)\n        external\n        view\n        returns (\n            address owner,\n            uint256 purchaseTime,\n            uint8 cyclesCompleted,\n            uint256 lastCycleTime,\n            bool isActive,\n            uint8 cyclesRemaining\n        )\n    {\n        Entry storage entry = entries[entryId];\n        require(entry.entryId != 0, \"Entry does not exist\");\n\n        return (\n            entry.owner,\n            entry.purchaseTimestamp,\n            entry.cyclesCompleted,\n            entry.lastCycleTimestamp,\n            entry.isActive,\n            entry.isActive ? uint8(MAX_CYCLES_PER_ENTRY - entry.cyclesCompleted) : 0\n        );\n    }\n\n    function getUserStats(address user)\n        external\n        view\n        returns (\n            uint256 totalEntriesPurchased,\n            uint256 totalCyclesCompleted,\n            uint256 referrerBonusEarned,\n            uint256 referrerBonusMissed,\n            uint256 totalEarnings,\n            uint256 totalReferrals,\n            bool isActive\n        )\n    {\n        User storage userStats = users[user];\n        return (\n            userStats.totalEntriesPurchased,\n            userStats.totalCyclesCompleted,\n            userStats.referrerBonusEarned,\n            userStats.referrerBonusMissed,\n            userStats.totalEarnings,\n            userStats.totalReferrals,\n            userStats.isActive\n        );\n    }\n\n    function getGlobalStats()\n        external\n        view\n        returns (\n            uint256 totalUsers,\n            uint256 totalActiveUsers,\n            uint256 totalEntriesPurchased,\n            uint256 totalReferrerBonusPaid,\n            uint256 totalReferrerBonusMissed,\n            uint256 totalPayoutsMade,\n            uint256 totalCyclesCompleted,\n            uint256 totalSlotsRemaining\n        )\n    {\n        return (\n            globalStats.totalUsers,\n            globalStats.totalActiveUsers,\n            globalStats.totalEntriesPurchased,\n            globalStats.totalReferrerBonusPaid,\n            globalStats.totalReferrerBonusMissed,\n            globalStats.totalPayoutsMade,\n            globalStats.totalCyclesCompleted,\n            globalStats.totalSlotsRemaining\n        );\n    }\n\n    function getUserActiveEntries(address user) external view returns (uint256[] memory) {\n        uint256[] memory userEntryIds = userEntries[user];\n        uint256 activeCount = 0;\n\n        for (uint256 i = 0; i < userEntryIds.length; i++) {\n            if (entries[userEntryIds[i]].isActive) {\n                activeCount++;\n            }\n        }\n\n        uint256[] memory activeEntries = new uint256[](activeCount);\n        uint256 index = 0;\n        for (uint256 i = 0; i < userEntryIds.length; i++) {\n            if (entries[userEntryIds[i]].isActive) {\n                activeEntries[index] = userEntryIds[i];\n                index++;\n            }\n        }\n\n        return activeEntries;\n    }\n\n    function getUserPotentialEarnings(address user) external view returns (uint256) {\n        uint256[] memory userEntryIds = userEntries[user];\n        uint256 potential = 0;\n\n        for (uint256 i = 0; i < userEntryIds.length; i++) {\n            Entry storage entry = entries[userEntryIds[i]];\n            if (entry.isActive) {\n                uint256 remainingCycles = uint256(MAX_CYCLES_PER_ENTRY - entry.cyclesCompleted);\n                potential += (remainingCycles * CYCLE_PAYOUT);\n            }\n        }\n\n        return potential;\n    }\n\n    function getInactiveReferrals(address referrer) external view returns (address[] memory) {\n        address[] storage referrals = userReferrals[referrer];\n        uint256 totalReferrals = referrals.length;\n        address[] memory tempInactive = new address[](totalReferrals);\n        uint256 inactiveCount = 0;\n\n        for (uint256 i = 0; i < totalReferrals; i++) {\n            if (!users[referrals[i]].isActive) {\n                tempInactive[inactiveCount] = referrals[i];\n                inactiveCount++;\n            }\n        }\n\n        address[] memory inactiveReferrals = new address[](inactiveCount);\n        for (uint256 i = 0; i < inactiveCount; i++) {\n            inactiveReferrals[i] = tempInactive[i];\n        }\n\n        return inactiveReferrals;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode.object",
          "evm.bytecode.sourceMap",
          "evm.bytecode.linkReferences",
          "evm.deployedBytecode.object",
          "evm.deployedBytecode.sourceMap",
          "evm.deployedBytecode.linkReferences",
          "evm.deployedBytecode.immutableReferences",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "london",
    "viaIR": true,
    "libraries": {}
  }
}
